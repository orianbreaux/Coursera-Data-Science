?gl
?interaction
?split
?sapply
?lapply
?iris
library(datasets)
data(iris)
iris
iris
str(iris)
x <- 1:5
str(x)
?str
summary(iris)
?sapply
sapply(iris, colMeans(iris))
traceback
?apply
colMeans(iris)
colMeans(iris[1])
apply(iris,1,mean)
apply(iris,2,mean)
apply(iris[,1:4],2,mean)
apply(iris[,1:4],1,mean)
?split
split(iris,virginica)
split(iris,"virginica)
split(iris,"virginica")
s <-iris$Species
s
s_Split <- split(iris,s)
s_split
s_Split
split(iris, iris$Species)
unsplit(split(iris, iris$Species))
sapply(iris,s_Split)
s_Split$virginica
colMeans(split(iris,iris$Species)$virginica)
?colMeans
.colMeans(split(iris,iris$Species)$virginica)
split(iris,iris$Species)$virginica
mean(split(iris,iris$Species)$virginica$Sepal.Length)
debug
debug()
debug()
?debug
debug(mean(split(iris,iris$Species)$virginica$Sepal.Length))
mean(split(iris,iris$Species)$virginica$Sepal.Length)
library(datasets)
data(mtcars)
?mtcars
mtcars
lapply(mtcars,mean)
colMeans(mtcars)
?lapply
sapply(mtcars,mean)
sapply(mtcars,cyl,mean)
tapply(mtcars$cyl,mtcars$mpg,mean)
splict(mtcars$mpg,mtcars$cyl)
split(mtcars$mpg,mtcars$cyl)
sapply(split(mtcars$mpg,mtcars$cyl),mean)
iris
sapply(iris$Sepal.Length,iris$Species)
split(iris$Sepal.Length,iris$Species)
sapply(split(iris$Sepal.Length,iris$Species),mean)
sapply(split(mtcars$hp,mtcars$cyl),mean)
sapply(split(mtcars$hp,mtcars$cyl),mean)[2]
sapply(split(mtcars$hp,mtcars$cyl),mean)[1]-sapply(split(mtcars$hp,mtcars$cyl),mean)[3]
debug(ls)
n
mtcars
?debug
debug(ls)
1
ls
ls()
undebug
et
?function
?function()
1+1
1+3
c(1,2,3,4,)
c(1,23,324,2)
str(c)
class(c)
temp<-c(1:11)
temp
class(temp)
?vector
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(temp)
Guess <- function(max) {
secret.number <- sample(1:max, 1)
total.guesses <- 1
finished <- FALSE
message(sprintf("I'm thinking of a number from 1 to %d.", max))
self.list <- list(
get.info = function() {
message(
sprintf(
"You %s guessed the number!",
if (finished) "have already"
else "still haven't"
)
)
message(sprintf("Guess number: %d", total.guesses))
message(sprintf("The number is taken from 1 to %d.", max))
},
get.clues = function(guess) {
if (finished) message("You've already guessed my number!")
else {
if (guess == secret.number) {
message("Congratulations!")
message(sprintf("You got it in %d guesses!", total.guesses))
finished <<- TRUE
} else {
if (secret.number < guess) message("Too high!")
else message("Too low!")
total.guesses <<- total.guesses + 1
}
}
}
)
class(self.list) <- "Guess"
self.list
}
clear
clr
clearAll
temp <- Guess(100)
22
54
123
game$get.clues(1)
temp$get.clues(1)
temp(1)
"Guess"
class(temp)
class(temp)
str(temp)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
temp <- c(1:10)
makeVector(temp)
temp
makeVector(temp)$getMean
makeVector(temp)$getmean
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
tempVector <- makeVector(c(1:10))
tempVector
cachemean(tempVector)
tempVector
cachemean(tempVector)
matric(c(1:3),c(10:13))
matrix(c(1:3),c(10:13))
matrix(c(1:3),c(10:13),2,2)
tempVector$getmean
?matrix
matrix(c(1:6),2,2)
matrix(c(1:6),3,3)
tempMatrix <- makeCacheMatrix(matrix(c(1:6),3,3))
source("cachematrix.R")
source('~/Desktop/ProgrammingAssignment2/cachematrix.R')
source('~/Desktop/ProgrammingAssignment2/cachematrix.R')
tempMatrix <- makeCacheMatrix(matrix(c(1:6),3,3))
solve(matrix(c(1:6),3,3))
tempMatrix$get()
makeCacheMatrix(matrix(c(1:6),3,3))
makeCacheMatrix$get
makeCacheMatrix$get()
tempMatrix$get
tempMatrix$get()
trace
aaa <- matrix(c(1,2,3,7,8,9),3,3)
solve(aaa)
aaa
matrix(seed(2),3,3)
rand
?random
aaa <- matrix(c(1,2,3,21,5,23),3,3)
aaa
solve(aaa)
aaa <- matrix(c(1,2,3,21,5,23,4,2,4),3,3)
solve(aaa)
cacheSolve(aaa)
str(makeCacheMatrix)
class(makeCacheMatrix)
source('~/Desktop/ProgrammingAssignment2/cachematrix.R')
cacheSolve(aaa)
makeCacheMatrix
makeCacheMatrix$get
makeCacheMatrix$get()
makeCacheMatrix.get()
aaa
solve(aaa)
makeCacheMatrix(aaa)
makeCacheMatrix(aaa)$get
makeCacheMatrix(aaa)$get()
makeCacheMatrix(aaa)$getinverse
makeCacheMatrix(aaa)$getinverse()
bbb <- matrix(c(9,11,2,21,5,23,4,2,4),3,3)
bbb
solve(bbb)
makeCacheMatrix()
makeCacheMatrix(aaa)
makeCacheMatrix(aaa)$set(bbb)
temp <- makeCacheMatrix(aaa)
temp
temp$get()
temp$set(bbb)
temp
temp$get()
bbb
cacheSolve(temp)
temp
cacheSolve(temp$get)
source('~/Desktop/ProgrammingAssignment2/cachematrix.R')
cacheSolve(temp$get)
temp$get
cacheSolve(temp)
source('~/Desktop/ProgrammingAssignment2/cachematrix.R')
cacheSolve(temp)
cacheSolve(temp)
temp$getinverse
temp$getinverse()
source('~/Desktop/ProgrammingAssignment2/cachematrix.R')
source('~/Desktop/ProgrammingAssignment2/cachematrix.R')
set.seed(1)
rpois(5,2)
?dpois
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
directory
getwd()
setwd(/Dekstop)
setwd(/Desktop)
setwd("/Desktop")
outcome <- read.csv("outcome-of-care-measures.csv", colClasses="character")
getwd()
versin
version
packageStatus()
update.packages(checkBuilt=TRUE)
setwd
?setwd
setwd("/Users/christine/Desktop/Dropbox/Coursera Data Science Specialization/Class 4 - Course Project 1")
getwd
getwd()
setwd("~/Desktop/Dropbox/Coursera Data Science Specialization/Class 4 - Course Project 1")
?read.txt
source('~/Desktop/Dropbox/Coursera Data Science Specialization/Class 4 - Course Project 1/plots.R')
data <- read.table("household_power_consumption.txt")
source('~/Desktop/Dropbox/Coursera Data Science Specialization/Class 4 - Course Project 1/plots.R')
data <- read.csv("~/Desktop/Dropbox/Coursera Data Science Specialization/Class 4 - Course Project 1/household_power_consumption.txt", sep=";", quote="'", stringsAsFactors=FALSE)
View(data)
head(ata)
head(data)
getwd()
